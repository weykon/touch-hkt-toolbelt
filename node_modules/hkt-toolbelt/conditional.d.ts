import { Kind } from ".";
export declare type _$equals<T, U> = [T, U] extends [U, T] ? true : false;
export declare abstract class Equals<T> extends Kind {
    abstract f: (x: this[Kind._]) => _$equals<T, typeof x>;
}
export declare type _$subtype<Super, X> = X extends Super ? true : false;
export declare abstract class SubtypeOf<Super> extends Kind {
    abstract f: (x: this[Kind._]) => _$subtype<Super, typeof x>;
}
export * as Conditional from "./conditional";
